###Minecraft Overviewer Config for Deepwoods Realms
#See documentation here - http://docs.overviewer.org/en/latest/config/

#How many simultaneous processes shall we use while rendering? (makes no difference to pre-rendering)
processes = 4

#Where is the world data we want to render?
worlds["Deepwoods"] = "/home/michael/deepwoods-worldfile/Deepwoods/"
#And where is the rendered map stored?
outputdir = "/mnt/nfs/data/Deepwoods-Map/"

#How do we output our progress during render? 
#See documentation for other options, use multiplex observer if you need multiple outputs e.g. console *and* web interface
#We are just outputing progress to the web interface
from observer import JSObserver
observer = JSObserver(outputdir, 10)

#Set default zoom level
defaultzoom = 3



### Filters

#Filter for finding wolves belonging to listed players
def dogFilter(poi):
    if poi['id'] == 'Wolf' or poi['id'] == 'minecraft:wolf':
    
        if poi['OwnerUUID'] == 'e0cbc801-e8c0-42a1-a8c6-24c4731c2e87':
            poi['icon'] = "icons/wolf_gordens.png"
            return "Wolf beloning to GordensAlive"
        if poi['OwnerUUID'] == 'e1a8e238-9aec-470f-893a-abf7f37d26a9':
            poi['icon'] = "icons/wolf_fortee.png"
            return "Wolf beloning to forteetoo"
        if poi['OwnerUUID'] == '1aebb953-644f-4a5b-9845-39d1ee732165':
            poi['icon'] = "icons/wolf_almighty.png"
            return "Wolf beloning to almightyhellfire"
        if poi['OwnerUUID'] == '40b478f1-5700-4eee-b3e0-10611a92373e':
            poi['icon'] = "icons/wolf_will.png"
            return "Wolf beloning to WillBot100"
            
#Filter for finding Shulker mobs
def shulkerFilter(poi):
	if poi['id'] == 'Shulker' or poi['id'] == 'minecraft:shulker':
		poi['icon'] = "icons/shulker.png" 
		return "A Shulker!"

#Filter for finding named horses, donkeys and mules.
def namedhorseFilter(poi):
    name = poi.get("CustomName", None)
    health = poi.get("Health", None)
    if name is not None and health is not None and "entity.KillerBunny.name" not in name:
        if poi["id"] == 'minecraft:horse':
            poi['icon'] = "icons/horse_icon.png"
            return "Horse named %s" % name
        if poi["id"] == 'minecraft:donkey':
            poi['icon'] = "icons/horse_icon.png"
            return "Donkey named %s" % name
        if poi["id"] == 'minecraft:mule':
            poi['icon'] = "icons/horse_icon.png"
            return "Mule named %s" % name

#Filter for finding last location of players
def playerIcons(poi):
    if poi['id'] == 'Player':
        poi['icon'] = "http://overviewer.org/avatar/%s" % poi['EntityId']
        return "Last known location for %s" % poi['EntityId']

#Filter for finding signs that start with "Image:", and then creating pop ups of screenshots hosted on e.g. imgur
#This fiter isn't used by any of the renders at the moment, but will definately be used in the future
def screenshotFilter(poi):
    if poi['id'] == 'Sign' or poi['id'] == 'minecraft:sign':
        if poi['Text1'].startswith('Image:'):
            poi['icon'] = "icons/painting_icon.png"
            image_html = "<style>.infoWindow img[src='{icon}'] {{display: none}}</style><a href='http://imgur.com/{id}'><img src='http://imgur.com/{id}s.jpg' /></a>".format(icon=poi['icon'], id=poi['Text1'][6:])
            return "\n".join([image_html, poi['Text2'], poi['Text3'], poi['Text4']])
            
#Filter for finding active beacons, and returning their effects and power levels
def beaconFilter(poi):
    if poi['id'] == 'Beacon' or poi['id'] == 'minecraft:beacon':
        poi['icon'] = "icons/beacon_icon.png"
        levels = str(poi['Levels'])
        powerone = ""
        powertwo = ""
        if poi['Primary'] == 0:
            powerone = "None"
        if poi['Primary'] == 1:
            powerone = "Speed"
        if poi['Primary'] == 3:
            powerone = "Haste"
        if poi['Primary'] == 5:
            powerone = "Strength"
        if poi['Primary'] == 8:
            powerone = "Jump Boost"
        if poi['Primary'] == 10:
            powerone = "Regen"
        if poi['Primary'] == 11:
            powerone = "Resistance"
        if poi['Secondary'] == 0:
            powertwo = "None"
        if poi['Secondary'] == 1:
            powertwo = "Speed"
        if poi['Secondary'] == 3:
            powertwo = "Haste"
        if poi['Secondary'] == 5:
            powertwo = "Strength"
        if poi['Secondary'] == 8:
            powertwo = "Jump Boost"
        if poi['Secondary'] == 10:
            powertwo = "Regen"
        if poi['Secondary'] == 11:
            powertwo = "Resistance"
        return "Beacon \nLevels: %s \nPrimary effect: %s \nSecondary effect: %s" % (levels, powerone, powertwo)

#Filter for finding gateway portals in the end, and returning their destination coords
def endgatewayFilter(poi):
    if poi['id'] == 'minecraft:end_gateway':
        poi['icon'] = "icons/endgateway_icon.png"
        coords = str(poi['ExitPortal'])
        coords = coords.replace("u","")
        coords = coords.replace("{","")
        coords = coords.replace("}","")
        return "Teleports to %s" % coords

#Filter for finding signs that start with custom hashtags, and then returns markers with icons listed below
#The extra text on the signs (lines 2,3, and 4) are returned on the tootip pop up
def placesFilter(poi):
    if poi['id'] == 'Sign' or poi['id'] == 'minecraft:sign':
        if poi['Text1'].startswith('#farm'):
            poi['icon'] = "icons/farm_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#town'):
            poi['icon'] = "icons/town_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#rail'):
            poi['icon'] = "icons/rail_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#castle'):
            poi['icon'] = "icons/castle_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#stables'):
            poi['icon'] = "icons/horse_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#villagers'):
            poi['icon'] = "icons/villager_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#temple'):
            poi['icon'] = "icons/temple_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#mine'):
            poi['icon'] = "icons/mine_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])
        if poi['Text1'].startswith('#place'):
            poi['icon'] = "icons/place_icon.png"
            return "\n".join([poi['Text2'], poi['Text3'], poi['Text4']])


### Custom Render Primitives
#custom nether render primitive for base nether renders
custom_nether = [Base(), EdgeLines(), Nether(), Lighting(), Depth(min=0,max=117)]
#custom nether render primitive for nether rail overlay. Bedrock and Netherack are not rendered.
nether_rail = [Base(), EdgeLines(), NoFluids(), Hide(blocks=[7,87]), Depth(min=118,max=122)]
#custom nether render primitive for topside overlay
nether_roof = [Base(), EdgeLines(), Depth(min=127,max=255)]

#Custom end render primitive for base end renders
end_lighting = [Base(), EdgeLines(), Lighting(strength=0.5)]



### Renders

#Every dimensions (overworld, nether, end) of every orientation (NW,NE,SW,SE) is defined as a seperate render
#Every overlay of every orientation is defined as a seperate render

#There are 36 renders, made up of 9 sets of 4 orientations. As follows:
#Overworld - NW NE SW SE
#Overworld slime overlay - NW NE SW SE
#Overworld biome overlay - NW NE SW SE
#Overworld mineral overlay - NW NE SW SE
#Overworld monster spawn overlay - NW NE SW SE
#Nether - NW NE SW SE
#Nether rail overlay - NW NE SW SE
#Nether topside overlay - NW NE SW SE
#End - NW NE SW SE

renders["overworld-northwest"] = {
    "world": "Deepwoods",
    "title": "NW",
    "northdirection" : "upper-left",
    'markers': [dict(name="Places",filterFunction=placesFilter),
	            dict(name="Beacons",filterFunction=beaconFilter),
	            dict(name="Players",filterFunction=playerIcons),
	            dict(name="Players' Wolves",filterFunction=dogFilter),
	            dict(name="Players' Horses",filterFunction=namedhorseFilter)],
}
renders["overworld-northeast"] = {
    "world": "Deepwoods",
    "title": "NE",
    "northdirection" : "upper-right",
    'markers': [dict(name="Places",filterFunction=placesFilter),
	            dict(name="Beacons",filterFunction=beaconFilter),
	            dict(name="Players",filterFunction=playerIcons),
	            dict(name="Players' Wolves",filterFunction=dogFilter),
	            dict(name="Players' Horses",filterFunction=namedhorseFilter)],
}
renders["overworld-southeast"] = {
    "world": "Deepwoods",
    "title": "SE",
    "northdirection" : "lower-right",
    'markers': [dict(name="Places",filterFunction=placesFilter),
	            dict(name="Beacons",filterFunction=beaconFilter),
	            dict(name="Players",filterFunction=playerIcons),
	            dict(name="Players' Wolves",filterFunction=dogFilter),
	            dict(name="Players' Horses",filterFunction=namedhorseFilter)],
}
renders["overworld-southwest"] = {
    "world": "Deepwoods",
    "title": "SW",
    "northdirection" : "lower-left",
    'markers': [dict(name="Places",filterFunction=placesFilter),
	            dict(name="Beacons",filterFunction=beaconFilter),
	            dict(name="Players",filterFunction=playerIcons),
	            dict(name="Players' Wolves",filterFunction=dogFilter),
	            dict(name="Players' Horses",filterFunction=namedhorseFilter)],
}

renders['biomeoverlay-northwest'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), BiomeOverlay()],
    'title': "Biomes",
    "northdirection" : "upper-left",
    'overlay': ['overworld-northwest']
}
renders['biomeoverlay-northeast'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), BiomeOverlay()],
    'title': "Biomes",
    "northdirection" : "upper-right",
    'overlay': ['overworld-northeast']
}
renders['biomeoverlay-southeast'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), BiomeOverlay()],
    'title': "Biomes",
    "northdirection" : "lower-right",
    'overlay': ['overworld-southeast']
}
renders['biomeoverlay-southwest'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), BiomeOverlay()],
    'title': "Biomes",
    "northdirection" : "lower-left",
    'overlay': ['overworld-southwest']
}


renders['mineraloverlay-northwest'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), MineralOverlay()],
    'title': "Minerals",
    "northdirection" : "upper-left",
    'overlay': ['overworld-northwest']
}
renders['mineraloverlay-northeast'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), MineralOverlay()],
    'title': "Minerals",
    "northdirection" : "upper-right",
    'overlay': ['overworld-northeast']
}
renders['mineraloverlay-southeast'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), MineralOverlay()],
    'title': "Minerals",
    "northdirection" : "lower-right",
    'overlay': ['overworld-southeast']
}
renders['mineraloverlay-southwest'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), MineralOverlay()],
    'title': "Minerals",
    "northdirection" : "lower-left",
    'overlay': ['overworld-southwest']
}

renders['spawnoverlay-northwest'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), SpawnOverlay()],
    'title': "Monster spawn",
    "northdirection" : "upper-left",
    'overlay': ['overworld-northwest']
}
renders['spawnoverlay-northeast'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), SpawnOverlay()],
    'title': "Monster spawn",
    "northdirection" : "upper-right",
    'overlay': ['overworld-northeast']
}
renders['spawnoverlay-southeast'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), SpawnOverlay()],
    'title': "Monster spawn",
    "northdirection" : "lower-right",
    'overlay': ['overworld-southeast']
}
renders['spawnoverlay-southwest'] = {
    'world': 'Deepwoods',
    'rendermode': [ClearBase(), SpawnOverlay()],
    'title': "Monster spawn",
    "northdirection" : "lower-left",
    'overlay': ['overworld-southwest']
}

renders["nether-northwest"] = {
    "world": "Deepwoods",
    "title": "NW",
    "rendermode": custom_nether,
    "dimension": "nether",
    "northdirection" : "upper-left",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Places",filterFunction=placesFilter)],
}
renders["nether-northeast"] = {
    "world": "Deepwoods",
    "title": "NE",
    "rendermode": custom_nether,
    "dimension": "nether",
    "northdirection" : "upper-right",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Places",filterFunction=placesFilter)],
}
renders["nether-southeast"] = {
    "world": "Deepwoods",
    "title": "SE",
    "rendermode": custom_nether,
    "dimension": "nether",
    "northdirection" : "lower-right",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Places",filterFunction=placesFilter)],
}
renders["nether-southwest"] = {
    "world": "Deepwoods",
    "title": "SW",
    "rendermode": custom_nether,
    "dimension": "nether",
    "northdirection" : "lower-left",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Places",filterFunction=placesFilter)],
}

renders['nrailnortheast'] = {
    'world': 'Deepwoods',
    'rendermode': nether_rail,
    'dimension': 'nether',
    'title': "Nether Rail",
    'overlay': ['nether-northeast'],
}

renders['nrailnorthwest'] = {
    'world': 'Deepwoods',
    'rendermode': nether_rail,
    'dimension': 'nether',
    'title': "Nether Rail",
    'overlay': ['nether-northwest'],
}

renders['nrailsoutheast'] = {
    'world': 'Deepwoods',
    'rendermode': nether_rail,
    'dimension': 'nether',
    'title': "Nether Rail",
    'overlay': ['nether-southeast'],
}

renders['nrailsouthwest'] = {
    'world': 'Deepwoods',
    'rendermode': nether_rail,
    'dimension': 'nether',
    'title': "Nether Rail",
    'overlay': ['nether-southwest'],
}

renders['nroofnortheast'] = {
    'world': 'Deepwoods',
    'rendermode': nether_roof,
    'dimension': 'nether',
    'title': "Nether Topside",
    'overlay': ['nether-northeast'],
}

renders['nroofnorthwest'] = {
    'world': 'Deepwoods',
    'rendermode': nether_roof,
    'dimension': 'nether',
    'title': "Nether Topside",
    'overlay': ['nether-northwest'],
}

renders['nroofsoutheast'] = {
    'world': 'Deepwoods',
    'rendermode': nether_roof,
    'dimension': 'nether',
    'title': "Nether Topside",
    'overlay': ['nether-southeast'],
}

renders['nroofsouthwest'] = {
    'world': 'Deepwoods',
    'rendermode': nether_roof,
    'dimension': 'nether',
    'title': "Nether Topside",
    'overlay': ['nether-southwest'],
}

renders["end-northwest"] = {
    "world": "Deepwoods",
    "title": "NW",
    "rendermode": end_lighting,
    "dimension": "end",
    "northdirection" : "upper-left",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Shulkers",filterFunction=shulkerFilter),
	            dict(name="Places",filterFunction=placesFilter),
	            dict(name="Gateways",filterFunction=endgatewayFilter)],
}
renders["end-northeast"] = {
    "world": "Deepwoods",
    "title": "NE",
    "rendermode": end_lighting,
    "dimension": "end",
    "northdirection" : "upper-right",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Shulkers",filterFunction=shulkerFilter),
	            dict(name="Places",filterFunction=placesFilter),
	            dict(name="Gateways",filterFunction=endgatewayFilter)],
}
renders["end-southeast"] = {
    "world": "Deepwoods",
    "title": "SE",
    "rendermode": end_lighting,
    "dimension": "end",
    "northdirection" : "lower-right",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Shulkers",filterFunction=shulkerFilter),
	            dict(name="Places",filterFunction=placesFilter),
	            dict(name="Gateways",filterFunction=endgatewayFilter)],
}
renders["end-southwest"] = {
    "world": "Deepwoods",
    "title": "SW",
    "rendermode": end_lighting,
    "dimension": "end",
    "northdirection" : "lower-left",
    'markers': [dict(name="Players",filterFunction=playerIcons),
	            dict(name="Shulkers",filterFunction=shulkerFilter),
	            dict(name="Places",filterFunction=placesFilter),
	            dict(name="Gateways",filterFunction=endgatewayFilter)],
}


